{% set date_option_mappings = {
    'Month': "DATEADD(MONTH, DATEDIFF(MONTH, DATE(0), `const_date`), DATE(0))",
    'Week': "DATEADD(week, DATEDIFF(week, DATE(4), `const_date`), DATE(4))"
} %}

{% set var_date_split = date_option_mappings.get(filter_values('date_options')[0], 'const_date') %}
-- spacer

-- dynamic1
{% set dynamic1_map = {
    'Province': " `store_province` ",
    'Account Rep': ' h.`account_rep` ',
    'Brand': ' `product_brand` ',
    'Store Location': " concat(h.store_storename, ' | ', h.store_city, ' | ', h.store_address, ' | ', h.store_postal_code)  ",
    'Store Name': ' h.`store_storename` ',
    'SkuSize': " concat(product_jid, ' (', `product_size`, ')')  "
} %}

{% set var_dynamic1 = dynamic1_map.get(filter_values('product_view_filter')[0], " concat(product_jid, ' (', `product_size`, ')')") %}

-- dynamic2
{% set dynamic2_mappings = {
    'Province': " store_province ",
    'Account Rep': " h.`account_rep` ",
    'Brand': " `product_brand` ",
    'Store Location': " concat(h.store_storename, ' | ', h.store_city, ' | ', h.store_address, ' | ', h.store_postal_code)  ",
    'Store Name': " h.`store_storename` ",
    'SkuSize': " concat(product_jid, ' (', `product_size`, ')')  "
} %}

{% set var_dynamic2 = dynamic2_mappings.get(filter_values('product_view_filter_2')[0], "''") %}

-- is_competitor_yes
{% set var_is_competitor_yes = "AND h.product_jid LIKE 'zz_%'" if filter_values('is_competitor')[0] == 'Yes' else "  " %}

-- is_competitor_no
{% set var_is_competitor_no = "AND h.product_jid NOT LIKE 'zz_%' " if (filter_values('is_competitor')[0] == 'No') or (filter_values('is_competitor') == []) else "  " %}

-- date_filter
{% set var_date_filter = "AND (const_date >= CAST(" +  filter_values('date_filter_start') [0] | string + " / 1000 AS DATE)
                         AND const_date <= CAST(" + filter_values('date_filter_end') [0] | string + "/ 1000 AS DATE)) "  
                         if filter_values('date_filter_start') and filter_values('date_filter_end') else "  " %}

-- format here is column_name:filter_input
{% set filter_mapping = {
    'category_comp': 'category_comp',
    'category2_comp': 'category2_comp',
    'size_comp': 'size_comp',
    'store_city': 'd.city',
    'store_storedid': 'd.storeid',
    'store_province': 'd.province',
    'h.account_rep': 'account_rep',
    'h.product_category1': 'c.category1',
    'tcs.custom_category1': 'custom_category1',
    'tcst.custom_attribute1': 'custom_attribute1',
    'tcst.custom_attribute2': 'custom_attribute2',
    'z.brand': 'c.brand',
    'h.store_storename': 'd.storename',
    "CONCAT(z.jid, ' (', z.size, ')' )": 'SKUSize'
}%}

--list all the column_names in filter mapping whose filter_input needs to have their quotes controlled
{% set quote_control = ['z.brand', 'h.store_storename', "CONCAT(z.jid, ' (', z.size, ')' )"] %}

-- LEFT JOIN variables

-- category_comp
{% set var_category_comp_leftjoin = ("LEFT JOIN dbt.tr1_product_mapping z on (CASE WHEN (h.product_jid LIKE 'zz_comp_%') THEN SUBSTRING(h.product_jid, 9) ELSE h.product_jid END) = z.jid" 
                                    if ((filter_values('category_comp') != []) or (filter_values('category2_comp') != []) or (filter_values('size_comp') != []) or (filter_values('c.brand') != []) or (filter_values('SKUSize') != [])) 
                                    else "  ") %}

-- custom_category1
{% set var_custom_category_leftjoin = (" LEFT JOIN dbt.tr1_client_skus tcs ON tcs.prodsizes_id = h.store_matchid AND tcs.client_code = h.clientcode" 
                                      if filter_values('custom_category1') != [] 
                                      else "  ") %}

-- custom_attribute1&2
{% set var_custom_attribute_leftjoin = ("  LEFT JOIN dbt.tr1_client_stores tcst ON tcst.address = h.store_address and h.clientcode = tcst.client_code_store  " 
                                       if (filter_values('custom_attribute1') != [] or filter_values('custom_attribute2') != []) 
                                       else "  ") %}

-- Metric aggregates

-- Store
{% set metric_aggregate_map = {
    'Min': 'MIN(a.storeid)',
    'Average': 'AVG(a.storeid)',
    'Peak': 'MAX(a.storeid)'
} %}

{% set metric_aggregate_store = metric_aggregate_map.get(filter_values('metric_type')[0], '  ') %}


-- Distro
{% set metric_aggregate_distro_map = {
    'Min': "MIN(distro_points)",
    'Average': "AVG(distro_points)",
    'Peak': "MAX(distro_points)"
} %}

{% set metric_aggregate_distro = metric_aggregate_distro_map.get(filter_values('metric_type')[0], "  ") %}

-- Store vs Distro
{% set metric_aggregate_store_vs_distro_map = {
    'Store': metric_aggregate_store,
    'Distro': metric_aggregate_distro,
    '': metric_aggregate_distro 
} %}

{% set metric_aggregate_store_vs_distro = metric_aggregate_store_vs_distro_map.get(filter_values('store_vs_distro')[0], "  ") %}

-- is metric null
{% set metric_type_is_null = "a.storeid, distro_points," if filter_values('metric_type') == [] else "  " %}

-- Store vs Distro
{% set store_vs_distro = "  " %}
{%- if filter_values('store_vs_distro')[0] == 'Store' -%}
{% set store_vs_distro = "COUNT(DISTINCT(`a.storeid`))" %}
{%- elif (filter_values('store_vs_distro')[0] == 'Distro') or (filter_values('store_vs_distro') == []) -%}
{% set store_vs_distro = "COUNT(DISTINCT(distro_points))" %} 
{%- endif -%}


-- Metric Daily Filter (can't figure out how to properly concatenate this)
{% set metric_daily_groupby_map = {
    'Peak': "
        GROUP BY 
            {{var_dynamic1}},
            {{var_dynamic2}}, 
            const_date,
            clientcode",
    'Average': "
        GROUP BY 
            {{var_dynamic1}},
            {{var_dynamic2}}, 
            const_date,
            clientcode",
    'Min': "
        GROUP BY 
            {{var_dynamic1}},
            {{var_dynamic2}}, 
            const_date,
            clientcode",
    'Cumulative': "  "
} %}

{% set metric_daily_groupby = metric_daily_groupby_map.get(filter_values('metric_type')[0], "  ") %}

-- Start of Query

WITH client_filter AS (
    SELECT DISTINCT(clientcode) clientcode
    FROM stage.tr1_clientcode_mapping
    WHERE username = '{{ current_username() }}'
) 

{%- if (filter_values('metric_type')[0] == 'Peak') or (filter_values('metric_type')[0] == 'Average') or (filter_values('metric_type')[0] == 'Min') -%}
-- Situation 1: Metric Type is Peak / Average / Min
,
daily AS (
    SELECT 
        `const_date` `const_date`,
        {{ var_date_split }} `aggregate_date`,
        COUNT(DISTINCT(`store_id`)) `a.storeid`,
        {{ var_dynamic1 }} `dynamic_column_1`,
        COUNT(DISTINCT(CONCAT(product_jid, product_size, store_id))) distro_points,
        {{ var_dynamic2 }} `dynamic_column_2`,
	    h.clientcode clientcode
    FROM dbt.tr1_prod_history2_distro h
    INNER JOIN client_filter c
        ON c.clientcode = h.clientcode

    {{ var_category_comp_leftjoin }}
    {{ var_custom_category_leftjoin }}
    {{ var_custom_attribute_leftjoin }}

    WHERE h.product_id != '' 

        {{ var_is_competitor_yes }}
        {{ var_is_competitor_no }}
        {{var_date_filter}}
        {% for column, category in filter_mapping.items() %}
            {% set filter_values = filter_values(category) %}
            {% if filter_values != [] %}
                {% if column not in quote_control %}
                    AND {{ column }} IN ('{{ filter_values|join("','") }}')
                {% elif column in quote_control %}
                    AND {{ column }} IN ('{{ filter_values|join("','")|replace("'", "''")|replace("'',''", "','") }}')
                {% endif %}
            {% endif %}
        {% endfor %}
        AND h.const_date > CAST('2023-01-01' AS date) 

    GROUP BY
        {{ var_dynamic1 }},
        {{ var_dynamic2 }},
        const_date,
		clientcode
    
)

SELECT
    `aggregate_date`,
    {{ metric_aggregate_store }} `store_count`,
    {{ metric_aggregate_store_vs_distro }} `distro_points`,
    `dynamic_column_1`,
    `dynamic_column_2`,
    clientcode
FROM daily
GROUP BY aggregate_date,
    dynamic_column_1,
    dynamic_column_2,
    {{ metric_type_is_null }}
	clientcode

{%- endif -%}  



{%- if (filter_values('metric_type') == []) or (filter_values('metric_type')[0] == 'Cumulative') -%}
-- Situation 2: Metric Type is Null / Cumulative
,
daily AS (
    SELECT 
        `const_date` `const_date`,
        {{ var_date_split }} `aggregate_date`,
        `store_id` `a.storeid` ,
        {{ var_dynamic1 }} `dynamic_column_1`,
        CONCAT(product_jid, product_size, store_id) distro_points,
        {{ var_dynamic2 }} `dynamic_column_2`,
	    h.clientcode clientcode
    FROM dbt.tr1_prod_history2_distro h
    INNER JOIN client_filter c
        ON c.clientcode = h.clientcode

    {{ var_category_comp_leftjoin }}
    {{ var_custom_category_leftjoin }}
    {{ var_custom_attribute_leftjoin }}

    WHERE h.product_id != '' 

        {{ var_is_competitor_yes }}
        {{ var_is_competitor_no }}
        {{var_date_filter}}
        {% for column, category in filter_mapping.items() %}
            {% set filter_values = filter_values(category) %}
            {% if filter_values != [] %}
                {% if column not in quote_control %}
                    AND {{ column }} IN ('{{ filter_values|join("','") }}')
                {% elif column in quote_control %}
                    AND {{ column }} IN ('{{ filter_values|join("','")|replace("'", "''")|replace("'',''", "','") }}')
                {% endif %}
            {% endif %}
        {% endfor %}
        AND h.const_date > CAST('2023-01-01' AS date) 

)

SELECT
    `aggregate_date`,
    COUNT(DISTINCT(`a.storeid`)) `store_count`,
    {{ store_vs_distro }} `distro_points`,
    `dynamic_column_1`,
    `dynamic_column_2`,
	clientcode
FROM daily
GROUP BY aggregate_date,
    dynamic_column_1,
    dynamic_column_2,
	clientcode
{%- endif -%}

-- end
